Declaration of Authorship:
All the files(asm.cpp,emu.cpp,all sample tests and custom tests, .o files .lst files and .log files) are owned by 
NAME: AAYUSH SHETH


Compilation instructions:
=========================
All the tests have been included in their corresponding input.txt files in their respective folder.
The input.txt file should be present in the same directory as asm.cpp and emu.cpp.

    1.) g++ asm.cpp -o asm (generates an executable of the name asm)
    2.) asm (generates logfile,machineCode adn the listfile for corresponding output) 
    3.) g++ emu.cpp -o emu (generates an executable of the name emu)
    4.) emu 'command' machineCode.o (this command will be operated on the machineCode.o file generated)



Assumptions:
============
       * Listing file (.lst) and Object file(.o) are generated only when there are no errors in the input Assembly code,  
      otherwise only Error file (logfile.txt) is generated.
    * If any address is accessed more than size of container of machine code then emu give assume this to be an infinte loop and will give error.


=============================
Program format and structure:
=============================
1. The assembler:
    
    * Every instruction is implemented.
    * It contains a table of instruction names and expected operands.
    * It is a 2 pass assembler (implemented in asm.cpp)
    * outputs the required correct information in the form of three files
       *  logfile.txt file for errors and warnings
       *  .lst file for listing 
       *  .o file for machine code object
    * All important errors are diagnosed and corresponding error file gets generated (named logfilelname_log.txt)
    * consistent and sensible formatting with sensible program structure. 
    * sensible variable, function & type names with explanatory comments.
		* Advanced listing file gets generated. (named listfile.l)
		* assembles test programs (including bubble sort)
        * Machine code object file gets generated (named machineCode.o)
	  * SET instruction is also implemented (which carries extra marks).
    *  Code is written in C++ with optimum time and space complexity.
    * Additional tests with outputs is also included

2. The Emulator:

    * After Compiling the emu.cpp we will get emu.exe we can use it run machine code we got from asm in form of .o file 
    * After that it will ask for command that you have to run
    * In my emu i have provided 6 options -trace,-after,-before,-isa,-write, -read there details will be mentioned while running the code
    * If error occured in asm then .o is not creating hence leading to emu not working for non existing file


